// File FHlazySearchTree.h
// Template definitions for FHlazySearchTrees
#ifndef FHLAZYSEARCHTREE_H
#define FHLAZYSEARCHTREE_H

// ---------------------- FHlazySearchTreeNode Prototype --------------------------
template <class Comparable>
class FHlazySearchTreeNode
{
public:
   FHlazySearchTreeNode( const Comparable & d = Comparable(),
                FHlazySearchTreeNode *lt = NULL,
                FHlazySearchTreeNode *rt = NULL, bool deleted = false)
   : lftChild(lt), rtChild(rt), data(d), deleted(deleted)
   { }

   FHlazySearchTreeNode *lftChild, *rtChild;
   Comparable data;
   bool deleted;

   // for use only with AVL Trees
   virtual int getHeight() const { return 0; }
   virtual bool setHeight(int height) { return true; }
};

// ---------------------- FHlazySearchTree Prototype --------------------------
template <class Comparable>
class FHlazySearchTree
{
protected:
   int mSize;
   FHlazySearchTreeNode<Comparable> *mRoot;
   int mSizeHard;

public:
   FHlazySearchTree() { mSize = 0; mSizeHard = 0; mRoot = NULL; }
   FHlazySearchTree(const FHlazySearchTree &rhs)
   { mRoot = NULL; mSizeHard = 0; mSize = 0; *this = rhs; }
   ~FHlazySearchTree() { clear(); }

   const Comparable &findMin() const;
   const Comparable &findMax() const;
   const Comparable &find(const Comparable &x) const;

   bool empty() const { return (mSizeHard == 0); }
   int size() const { return mSize; }
   int sizeHard() const { return mSizeHard; }
   void clear() { makeEmpty(mRoot); }
   const FHlazySearchTree & operator=(const FHlazySearchTree &rhs);

   bool insert(const Comparable &x);
   bool remove(const Comparable &x);
   bool contains(const Comparable &x) const { return find(mRoot, x) != NULL; }
   void collectGarbage() { collectGarbage(mRoot); }

   template <class Processor>
   void traverse(Processor func) const { traverse(mRoot, func); }
   int showHeight() const { return findHeight(mRoot); }

protected:
   FHlazySearchTreeNode<Comparable> *clone( FHlazySearchTreeNode<Comparable> *root) const;
   FHlazySearchTreeNode<Comparable> *findMin(FHlazySearchTreeNode<Comparable> *root) const;
   FHlazySearchTreeNode<Comparable> *findMax(FHlazySearchTreeNode<Comparable> *root) const;
   FHlazySearchTreeNode<Comparable> *find(FHlazySearchTreeNode<Comparable> *root,
                                  const Comparable &x) const;
   bool insert(FHlazySearchTreeNode<Comparable> * &root,
               const Comparable &x);
   bool removeHard(FHlazySearchTreeNode<Comparable> * &root, const Comparable &x);
   void makeEmpty(FHlazySearchTreeNode<Comparable> * &subtreeToDelete);
   void collectGarbage(FHlazySearchTreeNode<Comparable> * &root);
   template <class Processor>
   void traverse(FHlazySearchTreeNode<Comparable> *treeNode,
                 Processor func, int level = -1) const;
   int findHeight(FHlazySearchTreeNode<Comparable> *treeNode, int height = -1) const;

public:
   // for exception throwing
   class EmptyTreeException {};
   class NotFoundException {};
};

// FHlazySearchTree public method definitions -----------------------------
template <class Comparable>
const Comparable & FHlazySearchTree<Comparable>::findMin() const
{
   if (mRoot == NULL || mRoot->deleted == true)
      throw EmptyTreeException();
   return findMin(mRoot)->data;
}

template <class Comparable>
const Comparable & FHlazySearchTree<Comparable>::findMax() const
{
   if (mRoot == NULL || mRoot->deleted == true)
      throw EmptyTreeException();
   return findMax(mRoot)->data;
}

template <class Comparable>
const Comparable &FHlazySearchTree<Comparable>::find(
                                                  const Comparable &x) const
{
   FHlazySearchTreeNode<Comparable> *resultNode;

   resultNode = find(mRoot, x);
   if (resultNode == NULL || resultNode->deleted == true)
      throw NotFoundException();
   return resultNode->data;
}

template <class Comparable>
const FHlazySearchTree<Comparable> &FHlazySearchTree<Comparable>::operator=
(const FHlazySearchTree &rhs)
{
   if (&rhs != this)
   {
      clear();
      mRoot = clone(rhs.mRoot);
      mSize = rhs.size();
      mSizeHard = rhs.sizeHard();
   }
   return *this;
}

template <class Comparable>
bool FHlazySearchTree<Comparable>::insert(const Comparable &x)
{
   if (insert(mRoot, x))
   {
      return true;
   }
   return false;
}

template <class Comparable>
bool FHlazySearchTree<Comparable>::remove(const Comparable &x)
{
   FHlazySearchTreeNode<Comparable> *tn = NULL;

   if (mSizeHard == 0 || mRoot == NULL)
      return false;

   if ((tn = find(mRoot, x)) != NULL && tn->deleted == false)
   {
      tn->deleted = true;
      mSize--;
      return true;
   }
   return false;
}

template <class Comparable>
template <class Processor>
void FHlazySearchTree<Comparable>::traverse( FHlazySearchTreeNode<Comparable> *treeNode,
                                         Processor func, int level) const
{
   if (treeNode == NULL)
      return;
   // we're not doing anything with level but its there in case we want it
   traverse(treeNode->lftChild, func, level + 1);
   if (!treeNode->deleted)
      func(treeNode->data);
   traverse(treeNode->rtChild, func, level + 1);
}


// FHlazySearchTree private method definitions -----------------------------
template <class Comparable>
FHlazySearchTreeNode<Comparable> *FHlazySearchTree<Comparable>::clone(
                                                           FHlazySearchTreeNode<Comparable> *root) const
{
   FHlazySearchTreeNode<Comparable> *newNode;
   if (root == NULL || root->deleted == true)
      return NULL;

   newNode =  new FHlazySearchTreeNode<Comparable>(
                                           root->data,
                                           clone(root->lftChild), clone(root->rtChild));
   return newNode;
}

template <class Comparable>
FHlazySearchTreeNode<Comparable> *FHlazySearchTree<Comparable>::findMin(
                                                             FHlazySearchTreeNode<Comparable> *root) const
{
   FHlazySearchTreeNode<Comparable> *find;

   if (root == NULL)
      return NULL;

   find = findMin(root->lftChild);

   if (find != NULL)
      return find;

   if (!root->deleted)
      return root;

   return findMin(root->rtChild);
}

template <class Comparable>
FHlazySearchTreeNode<Comparable> *FHlazySearchTree<Comparable>::findMax(
                                                             FHlazySearchTreeNode<Comparable> *root) const
{
   if (root == NULL)
      return NULL;
   if (root->rtChild == NULL)
      return root;
   return findMax(root->rtChild);
}

template <class Comparable>
FHlazySearchTreeNode<Comparable>* FHlazySearchTree<Comparable>::find(
                                                          FHlazySearchTreeNode<Comparable> *root, const Comparable &x) const
{
   if (root == NULL)
      return NULL;

   if (x < root->data)
      return find(root->lftChild, x);
   if (root->data < x)
      return find(root->rtChild, x);
   return root;
}

template <class Comparable>
bool FHlazySearchTree<Comparable>::insert(
                                       FHlazySearchTreeNode<Comparable> * &root, const Comparable &x)
{
   if (root == NULL)
   {
      root = new FHlazySearchTreeNode<Comparable>(x, NULL, NULL);
      mSize++;
      mSizeHard++;
      return true;
   }
   else if (x < root->data)
      return insert(root->lftChild, x);
   else if (root->data < x)
      return insert(root->rtChild, x);

   if (root->deleted == true)
   {
      root->deleted = false;
      mSize++;
      return true;
   }

   return false; // duplicate
}

template <class Comparable>
bool FHlazySearchTree<Comparable>::removeHard(
                                       FHlazySearchTreeNode<Comparable> * &root, const Comparable &x)
{
   if (root == NULL)
      return false;

   if (x < root->data)
      return removeHard(root->lftChild, x);
   if (root->data < x)
      return removeHard(root->rtChild, x);

   // found the node
   if (root->lftChild != NULL && root->rtChild != NULL)
   {
      FHlazySearchTreeNode<Comparable> *minNode = findMin(root->rtChild);
      root->data = minNode->data;
      root->deleted = false;
      removeHard(root->rtChild, minNode->data);
   }
   else
   {
      FHlazySearchTreeNode<Comparable> *nodeToRemove = root;
      root = (root->lftChild != NULL)? root->lftChild : root->rtChild;
      delete nodeToRemove;
      mSizeHard--;
   }
   return true;
}

template <class Comparable>
void FHlazySearchTree<Comparable>::makeEmpty(
                                          FHlazySearchTreeNode<Comparable> * &subtreeToDelete)
{
   if (subtreeToDelete == NULL)
      return;

   // remove children
   makeEmpty(subtreeToDelete->lftChild);
   makeEmpty(subtreeToDelete->rtChild);
   
   // clear client's pointer
   delete subtreeToDelete;
   subtreeToDelete = NULL;
   --mSize;
   --mSizeHard;
}

template <class Comparable>
void FHlazySearchTree<Comparable>::collectGarbage(FHlazySearchTreeNode<Comparable> * &root)
{
   if (root == NULL)
      return;

   collectGarbage(root->lftChild);
   collectGarbage(root->rtChild);

   if (root->deleted)
   {
      removeHard(root, root->data);
   }
}

template <class Comparable>
int FHlazySearchTree<Comparable>::findHeight( FHlazySearchTreeNode<Comparable> *treeNode,
                                          int height ) const
{
   int leftHeight, rightHeight;
   
   if (treeNode == NULL)
      return height;
   height++;
   leftHeight = findHeight(treeNode->lftChild, height);
   rightHeight = findHeight(treeNode->rtChild, height);
   return (leftHeight > rightHeight)? leftHeight : rightHeight;
}
#endif


// main

// Assignment #4 Instructor Solution
// CS 2C, Foothill College, Michael Loceff
// --------------- main ---------------
// CS 2C Simple Search Tree Client - Lazy Deletion, int data
#include <iostream>
#include <string>
#include <stack>
#include "FHlazySearchTree.h" 
using namespace std;

template <typename T>
class PrintObject
{
public:
   void operator()(const T& obj)
   {
      cout << obj << " ";
   }
};

int main()
{
   FHlazySearchTree<int> searchTree;
   PrintObject<int> intPrinter;

   searchTree.traverse(intPrinter);

   cout << "\ninitial size: " << searchTree.size() << endl;

   try
   {
      cout << endl << searchTree.findMin() << endl << endl;
   }
   catch (...)
   {
      cout << "oops!" << endl << endl;
   }

   try
   {
      cout << searchTree.findMax() << endl << endl;
   }
   catch (...)
   {
      cout << "oops!" << endl << endl;
   }

   searchTree.insert(50);
   searchTree.insert(20);
   searchTree.insert(30);
   searchTree.insert(70);
   searchTree.insert(10);
   searchTree.insert(60);

   try
   {
      cout << searchTree.findMin() << endl << endl;
   }
   catch (...)
   {
      cout << "oops!" << endl << endl;
   }

   try
   {
      cout << searchTree.findMax() << endl << endl;
   }
   catch (...)
   {
      cout << "oops!" << endl << endl;
   }

   cout << "After populating -- traversal and sizes: \n";
   searchTree.traverse(intPrinter);
   cout << "\ntree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   cout << "Collecting garbage on new tree - should be no garbage." << endl;
   searchTree.collectGarbage();
   cout << "tree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   // test assignment operator
   FHlazySearchTree<int> searchTree2 = searchTree;

   cout << "\n\nAttempting 1 removal: \n";
   if (searchTree.remove(20))
      cout << "removed " << 20 << endl;

   cout << "tree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   cout << "Collecting Garbage - should clean 1 item. " << endl;
   searchTree.collectGarbage();
   cout << "tree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   cout << "Collecting Garbage again - no change expected." << endl;
   searchTree.collectGarbage();
   cout << "tree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   // test soft insertion and deletion:

   cout << "Adding 'hard' 22 - should see new sizes. " << endl;
   searchTree.insert(22);
   searchTree.traverse(intPrinter);
   cout << "\ntree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   cout << "\nAfter soft removal. " << endl;
   searchTree.remove(22);
   searchTree.traverse(intPrinter);
   cout << "\ntree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   cout << "Repeating soft removal. Should see no change. " << endl;
   searchTree.remove(22);
   searchTree.traverse(intPrinter);
   cout << "\ntree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   cout << "Soft insertion. Hard size should not change. " << endl;
   searchTree.insert(22);
   searchTree.traverse(intPrinter);
   cout << "\ntree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;

   cout << "\n\nAttempting 100 removals: \n";
   for (int k = 100; k > 0; k--)
   {
      if (searchTree.remove(k))
         cout << "removed " << k << endl;
   }

   try
   {
      cout << endl << searchTree.findMin() << endl << endl;
   }
   catch (...)
   {
      cout << "oops!" << endl << endl;
   }

   try
   {
      cout << searchTree.findMax() << endl << endl;
   }
   catch (...)
   {
      cout << "oops!" << endl << endl;
   }

   searchTree.collectGarbage();

   cout << "\nsearchTree now:\n";
   searchTree.traverse(intPrinter);
   cout << "\ntree 1 size: " << searchTree.size()
   << " Hard size: " << searchTree.sizeHard() << endl;


   searchTree2.insert(500);
   searchTree2.insert(200);
   searchTree2.insert(300);
   searchTree2.insert(700);
   searchTree2.insert(100);
   searchTree2.insert(600);
   cout << "\nsearchTree2:\n";
   searchTree2.traverse(intPrinter);
   cout << "\ntree 2 size: " << searchTree2.size()
   << " Hard size: " << searchTree2.sizeHard() << endl;

   return 0;
}

/* ---------------------- run --------------------------
 
 initial size: 0

 oops!

 oops!

 10

 70

 After populating -- traversal and sizes:
 10 20 30 50 60 70
 tree 1 size: 6 Hard size: 6
 Collecting garbage on new tree - should be no garbage.
 tree 1 size: 6 Hard size: 6


 Attempting 1 removal:
 removed 20
 tree 1 size: 5 Hard size: 6
 Collecting Garbage - should clean 1 item.
 tree 1 size: 5 Hard size: 5
 Collecting Garbage again - no change expected.
 tree 1 size: 5 Hard size: 5
 Adding 'hard' 22 - should see new sizes.
 10 22 30 50 60 70
 tree 1 size: 6 Hard size: 6

 After soft removal.
 10 30 50 60 70
 tree 1 size: 5 Hard size: 6
 Repeating soft removal. Should see no change.
 10 30 50 60 70
 tree 1 size: 5 Hard size: 6
 Soft insertion. Hard size should not change.
 10 22 30 50 60 70
 tree 1 size: 6 Hard size: 6


 Attempting 100 removals:
 removed 70
 removed 60
 removed 50
 removed 30
 removed 22
 removed 10

 oops!

 oops!


 searchTree now:

 tree 1 size: 0 Hard size: 0

 searchTree2:
 10 20 30 50 60 70 100 200 300 500 600 700
 tree 2 size: 12 Hard size: 12
 
------------------------------------------------- */


