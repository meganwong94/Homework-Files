// ------------------- file #1 ----------------------------

#include <iostream>
using namespace std;

#include "iTunes.h"

// for timing our algorithms
#include <time.h>

class Sublist
{
public:
   Sublist(vector<int> *orig = NULL)
   : sum(0), originalObjects (orig) { }
   Sublist addItem( int indexOfItemToAdd );
   void showSublist() const;
   int getSum() const { return sum; }

private:
   int sum;
   vector<int> *originalObjects;
   vector<int> indices;
};

// ----------- prototypes -------------
void displayOneTune(const iTunesEntry & tune);

// --------------- main ---------------
int main()
{
   int TARGET = 180;
   vector<int> dataSet;
   vector<Sublist> choices;
   int k, j, numSets, masterSum, bestIndex;
   bool foundPerfect = false;

   dataSet.push_back(20); dataSet.push_back(15);
   dataSet.push_back(19); dataSet.push_back(18); dataSet.push_back(11);
   dataSet.push_back(12); dataSet.push_back(22);
   dataSet.push_back(25); dataSet.push_back(29);
   dataSet.push_back(13); dataSet.push_back(17);

   choices.clear();
   cout << "Target time: " << TARGET << endl;

   for (int i = 0; i < dataSet.size(); i++)
   {
      masterSum += dataSet[i];
   }

   if (masterSum <= TARGET)
   {
      cout << "dataSet is smaller than the target!" << endl;
      return 0;
   }

   Sublist emptySubList(&dataSet);

   choices.push_back(emptySubList);

   bestIndex = 0;

   for (k = 0; k < dataSet.size(); k++)
   {
      numSets = choices.size();

      for (j = 0; j < numSets; j++)
      {
         if (choices[j].getSum() + dataSet[k] <= TARGET)
         {
            choices.push_back(choices[j].addItem(k));

            if (choices[choices.size() - 1].getSum() > choices[bestIndex].getSum())
               bestIndex = choices.size() - 1;
         }

         if (choices[j].getSum() + dataSet[k] == TARGET)
         {
            foundPerfect = true;
            break;
         }
      }

      if (foundPerfect)
         break;
   }

   cout << "Sublist ---------------------------" << endl;

   cout << "Sum: " << choices[bestIndex].getSum() << endl;

   choices[bestIndex].showSublist();
   cout << endl;
   return 0;
}

Sublist Sublist::addItem(int indexOfItemToAdd)
{
   Sublist newSubList = *this;

   newSubList.indices.push_back(indexOfItemToAdd);

   newSubList.sum += originalObjects->at(indexOfItemToAdd);

   return newSubList;
}

void Sublist::showSublist() const
{
   for (int k = 0; k < indices.size(); k++)
   {
      cout << "array[" << k << "] = " << originalObjects->at(indices[k]) << ", "
      << endl;
   }
}

void displayOneTune(const iTunesEntry & tune)
{
   cout << tune.getArtist() << " | ";
   cout << tune.getTitle() << " | ";
   // cout << tune.getTime() << " | ";
   cout << " " << tune.convertTimeToString() << endl;
}

/* ----------------- run #1 ----------------------
 
 Target time: 180
 Sublist ---------------------------
 Sum: 179
 array[0] = 20,
 array[1] = 15,
 array[2] = 19,
 array[3] = 18,
 array[4] = 11,
 array[5] = 12,
 array[6] = 25,
 array[7] = 29,
 array[8] = 13,
 array[9] = 17,
 
------------------------------------------------ */

/* ------------------ run #2 -----------------------
 
 Target time: 300
 dataSet is smaller than the target!
 
-------------------------------------------------- */

/* ------------------ run #3 -----------------------

 Target time: 150
 Sublist ---------------------------
 Sum: 150
 array[0] = 20,
 array[1] = 15,
 array[2] = 19,
 array[3] = 18,
 array[4] = 11,
 array[5] = 25,
 array[6] = 29,
 array[7] = 13,

----------------------------------------------- */

// ------------------- file #2 ----------------------------

#include <iostream>
using namespace std;

#include "iTunes.h"

// for timing our algorithms
#include <time.h>

class Sublist
{
public:
   Sublist(vector<iTunesEntry> *orig = NULL)
   : sum(0), originalObjects (orig) { }
   Sublist addItem( int indexOfItemToAdd );
   void showSublist() const;
   int getSum() const { return sum; }

private:
   int sum;
   vector<iTunesEntry> *originalObjects;
   vector<int> indices;
};

// ----------- prototypes -------------
void displayOneTune(const iTunesEntry & tune);
ostream &operator <<(ostream & ostrm, const iTunesEntry & tune);
int operator+(int num1, const iTunesEntry & num2);
int operator+(const iTunesEntry & num1, int num2);

// --------------- main ---------------
int main()
{
   const int TARGET = 311;
   vector<iTunesEntry> dataSet;
   vector<Sublist> choices;
   int numSets, array_size, masterSum, bestIndex, k, j;
   bool foundPerfect = false;

   // read the data
   iTunesEntryReader tunes_input("itunes_file.txt");
   if (tunes_input.readError())
   {
      cout << "couldn't open " << tunes_input.getFileName() << " for input.\n";
      exit(1);
   }

   clock_t startTime, stopTime;

   startTime = clock();

   array_size = tunes_input.getNumTunes();

   for (int k = 0; k < array_size; k++)
      dataSet.push_back(tunes_input[k]);

   cout << "Target time: " << TARGET << endl;

   for (int i = 0; i < dataSet.size(); i++)
   {
      masterSum = masterSum + dataSet[i];
   }
      
   if (masterSum <= TARGET)
   {
      cout << "dataSet is smaller than the target!" << endl;
      return 0;
   }
      
   Sublist emptySubList(&dataSet);
      
   choices.push_back(emptySubList);
      
   bestIndex = 0;
      
   for (k = 0; k < dataSet.size(); k++)
   {
      numSets = choices.size();
      
      for (j = 0; j < numSets; j++)
      {
         if (choices[j].getSum() + dataSet[k] <= TARGET)
         {
            choices.push_back(choices[j].addItem(k));
      
            if (choices[choices.size() - 1].getSum() > choices[bestIndex].getSum())
               bestIndex = choices.size() - 1;
         }
      
         if (choices[j].getSum() + dataSet[k] == TARGET)
         {
            foundPerfect = true;
            break;
         }
      }
      
      if (foundPerfect)
         break;
   }
      
   cout << "Sublist ---------------------------" << endl;
      
   cout << "Sum: " << choices[bestIndex].getSum() << endl;
      
   choices[bestIndex].showSublist();
   cout << endl;

   stopTime = clock();

   cout << "\nAlgorithm Elapsed Time: "
   << (double)(stopTime - startTime)/(double)CLOCKS_PER_SEC
   << " seconds." << endl << endl;

   return 0;
}

Sublist Sublist::addItem(int indexOfItemToAdd)
{
   Sublist newSubList = *this;

   newSubList.indices.push_back(indexOfItemToAdd);

   newSubList.sum = newSubList.sum + originalObjects->at(indexOfItemToAdd);

   return newSubList;
}

void Sublist::showSublist() const
{
   for (int k = 0; k < indices.size(); k++)
   {
      cout << "array[" << k << "] = " << originalObjects->at(indices[k]) << ", "
      << endl;
   }
}

void displayOneTune(const iTunesEntry & tune)
{
   cout << tune.getArtist() << " | ";
   cout << tune.getTitle() << " | ";
   // cout << tune.getTime() << " | ";
   cout << " " << tune.convertTimeToString() << endl;
}

ostream &operator <<(ostream & ostrm, const iTunesEntry & tune)
{
   ostrm << tune.getTitle() << " by " << tune.getArtist() << "(" << tune.getTime() << ")";
   return ostrm;
}

int operator+(int num1, const iTunesEntry & num2)
{
   int newTime = num1 + num2.getTime();

   return newTime;
}

int operator+(const iTunesEntry & num1, int num2)
{
   int newTime = num1.getTime() + num2;

   return newTime;
}

/* --------------------- run #1 ------------------------
 
 Target time: 100000
 dataSet is smaller than the target!
 
------------------------------------------------------ */

/* --------------------- run #2 -------------------------
 
 Target time: 3600
 Sublist ---------------------------
 Sum: 3600
 array[0] = Cowboy Casanova by Carrie Underwood(236),
 array[1] = Quitter by Carrie Underwood(220),
 array[2] = Russian Roulette by Rihanna(228),
 array[3] = Monkey Wrench by Foo Fighters(230),
 array[4] = Pretending by Eric Clapton(283),
 array[5] = Bad Love by Eric Clapton(308),
 array[6] = Everybody's In The Mood by Howlin' Wolf(178),
 array[7] = Well That's All Right by Howlin' Wolf(175),
 array[8] = Samson and Delilah by Reverend Gary Davis(216),
 array[9] = Hot Cha by Roy Buchanan(208),
 array[10] = Green Onions by Roy Buchanan(443),
 array[11] = I'm Just a Prisoner by Janiva Magness(230),
 array[12] = You Were Never Mine by Janiva Magness(276),
 array[13] = Hobo Blues by John Lee Hooker(187),
 array[14] = I Can't Quit You Baby by John Lee Hooker(182),


 Algorithm Elapsed Time: 0.073903 seconds.

 ----------------------------------------------------- */

/* ---------------------- run #3 ------------------------
 
 Target time: 311
 Sublist ---------------------------
 Sum: 311
 array[0] = Stronger by Kanye West(311),


 Algorithm Elapsed Time: 0.000189 seconds.
 
-------------------------------------------------------- */

